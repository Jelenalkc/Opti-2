# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yvs-BmWqUoaVsiSrQoS9tG9EeVFs8CtZ
"""

import numpy as np
import pandas as pd
from queue import PriorityQueue

class Node:
    def __init__(self, level, value, weight, bound, items):
        self.level = level
        self.value = value
        self.weight = weight
        self.bound = bound
        self.items = items

    def __lt__(self, other):
        return self.bound > other.bound

def calculate_bound(node, n, W, revenues, weights):
    if node.weight >= W:
        return 0

    bound = node.value
    total_weight = node.weight
    level = node.level + 1

    while level < n and total_weight + weights[level] <= W:
        total_weight += weights[level]
        bound += revenues[level]
        level += 1

    if level < n:
        bound += (W - total_weight) * (revenues[level] / weights[level])

    return bound

def branch_and_bound(revenues, weights, W):
    n = len(revenues)
    pq = PriorityQueue()

    root = Node(-1, 0, 0, 0.0, [])
    root.bound = calculate_bound(root, n, W, revenues, weights)
    pq.put(root)

    max_value = 0
    best_items = []

    while not pq.empty():
        node = pq.get()

        if node.bound > max_value:
            for decision in [1, 0]:
                level = node.level + 1
                new_weight = node.weight + decision * weights[level] if level < n else node.weight
                new_value = node.value + decision * revenues[level] if level < n else node.value
                new_items = node.items + [decision] if level < n else node.items

                if new_weight <= W:
                    if new_value > max_value:
                        max_value = new_value
                        best_items = new_items

                    if level < n - 1:
                        child = Node(level, new_value, new_weight, 0.0, new_items)
                        child.bound = calculate_bound(child, n, W, revenues, weights)

                        if child.bound > max_value:
                            pq.put(child)

    return max_value, best_items

if __name__ == "__main__":
    # Example input
    data = {
        "Project": [1, 2, 3, 4, 5, 6],
        "Revenue": [15, 20, 5, 25, 22, 17],
        "Days": [51, 60, 35, 60, 53, 10]
    }

    df = pd.DataFrame(data)

    revenues = df["Revenue"].tolist()
    weights = df["Days"].tolist()
    W = 150  # Total researcher days available

    max_value, selected_projects = branch_and_bound(revenues, weights, W)

    print("Maximum Revenue:", max_value)
    print("Selected Projects:", [i + 1 for i, x in enumerate(selected_projects) if x == 1])